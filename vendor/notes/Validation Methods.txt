Validation Methods
	Validations
		- Ensure data meets requirements before saving to database
		- Validation code resides in models
		- ActiveRecord::Validations
		- Failed validations: will not save, track errors

	Validation Methods

	validates_presence_of
		class Subject < ActiveModel

			validates_presence_of :name

		end

		- Attribute must not be blank (nil, false, "", " ", [], {})
		 :message => "can't be blank"
	validates_length_of
		- Attribute must meet length requirements
			+ :is, :minimum, :maximum, :within, :in
			+ :wrong_length => "is the wrong length (should be {{count}} characters)"
			+ :too_short => "is too short (minimum is {{count}} characters)"
			+ :too_long => "is too long (maximum is {{count}} characters)"

	validates_numericality_of
		- Attribute must be integer or floating point number.
			+ :equal_to, :greater_than, :less_than,
			:greater_than_or_equal_to,
			:less_than_or_equal_to,
			:odd, :even, :only_integer
		- Default message
			+ :message => "is not a number"

	validates_inclusion_of
		- Attribute must be in a list of choices (array or range)
			+ :in
		- Default message
			+ :message => "is not included in the list"

	validates_exclusion_of
		- Attributes must not be in a list of choices (array or range)
			+ :in
		- Default message
			+ :message => "is reserved"

	validates_format_of
		- Attributes must match a regular expression
			+ :with
		- Default message
			+ :message => "is invalid"

	validates_unique_expression
		- Attribute must not exist in the database
			+ :case_sensitive
			+ :scope
		- Default message
			+ :message => "has already been taken"

	validates_acceptance_of
		- Attribute must be "accepted."
		- Creates a virtual attribute no table column.
			+ :accept (expected value, "1")
		- Default message
			+ :message => "must be accepted"

	validates_confirmation_of
		- Must be confirmed by entering it twice
		- Creates a virtual attribute for the confirmation
		- Only validates when confirmation attribute is not nil
		- Default message
			+ :message => "doesn't match confirmation"

	validates_associated
		- Associated object or objects -- must all be valid.
		- First argument: association name; not attribute
		- Calls #valid? on the object or array of objects
		- Does not fail if object does not exist
		- Beware of infinite loops and long cascades

	Options: Most Methods
		+ :allow_nil => true
			Skips validation if attribute is nil (no value set)
		+ :allow_blank => true
			Skips validation if attribute is blank

	Options: All Methods
		+ :on => :save / :create / :update
			It only validates if this is a new record (:create) or an existing record
			(:update)

			:save validates in both cases and is the default.
		+ :if => :method / :unless => :method
			:method -- a method defined in the model that should return true or false
		